package ij;import ij.process.*;import ij.io.*;import java.awt.image.ColorModel;/** *  This class represents an array of disk-resident images. * *@author     Thomas *@created    4 decembre 2007 */public class VirtualStack extends ImageStack {	final static int INITIAL_SIZE = 100;	String path;	int nSlices;	String[] names;	/**	 *  Creates a new, empty virtual stack.	 *	 *@param  width   Description of the Parameter	 *@param  height  Description of the Parameter	 *@param  cm      Description of the Parameter	 *@param  path    Description of the Parameter	 */	public VirtualStack(int width, int height, ColorModel cm, String path) {		super(width, height, cm);		this.path = path;		names = new String[INITIAL_SIZE];		//IJ.log("VirtualStack: "+path);	}	/**	 *  Adds an image to the end of the stack.	 *	 *@param  name  The feature to be added to the Slice attribute	 */	public void addSlice(String name) {		if (name == null) {			throw new IllegalArgumentException("'name' is null!");		}		nSlices++;		//IJ.log("addSlice: "+nSlices+"	"+name);		if (nSlices == names.length) {		String[] tmp = new String[nSlices * 2];			System.arraycopy(names, 0, tmp, 0, nSlices);			names = tmp;		}		names[nSlices - 1] = name;	}	/**	 *  Does nothing.	 *	 *@param  sliceLabel  The feature to be added to the Slice attribute	 *@param  pixels      The feature to be added to the Slice attribute	 */	@Override    public void addSlice(String sliceLabel, Object pixels) {	}	/**	 *  Does nothing..	 *	 *@param  sliceLabel  The feature to be added to the Slice attribute	 *@param  ip          The feature to be added to the Slice attribute	 */	@Override    public void addSlice(String sliceLabel, ImageProcessor ip) {	}	/**	 *  Does noting.	 *	 *@param  sliceLabel  The feature to be added to the Slice attribute	 *@param  ip          The feature to be added to the Slice attribute	 *@param  n           The feature to be added to the Slice attribute	 */	@Override    public void addSlice(String sliceLabel, ImageProcessor ip, int n) {	}	/**	 *  Deletes the specified slice, were 1<=n<=nslices.	 *	 *@param  n  Description of the Parameter	 */	@Override    public void deleteSlice(int n) {		if (n < 1 || n > nSlices) {			throw new IllegalArgumentException("Argument out of range: " + n);		}		if (nSlices < 1) {			return;		}        System.arraycopy(names, n, names, n - 1, nSlices - n);		names[nSlices - 1] = null;		nSlices--;	}	/**	 *  Deletes the last slice in the stack.	 */	@Override    public void deleteLastSlice() {		if (nSlices > 0) {			deleteSlice(nSlices);		}	}	/**	 *  Returns the pixel array for the specified slice, were 1<=n<=nslices.	 *	 *@param  n  Description of the Parameter	 *@return    The pixels value	 */	@Override    public Object getPixels(int n) {	ImageProcessor ip = getProcessor(n);		if (ip != null) {			return ip.getPixels();		} else {			return null;		}	}	/**	 *  Assigns a pixel array to the specified slice, were 1<=n<=nslices.	 *	 *@param  pixels  The new pixels value	 *@param  n       The new pixels value	 */	@Override    public void setPixels(Object pixels, int n) {	}	/**	 *  Returns an ImageProcessor for the specified slice, were 1<=n<=nslices.	 *  Returns null if the stack is empty.	 *	 *@param  n  Description of the Parameter	 *@return    The processor value	 */	@Override    public ImageProcessor getProcessor(int n) {	//IJ.log("getProcessor: "+n+"  "+names[n-1]);	ImagePlus imp = new Opener().openImage(path, names[n - 1]);		if (imp != null) {		int w = imp.getWidth();		int h = imp.getHeight();		int type = imp.getType();		ColorModel cm = imp.getProcessor().getColorModel();		} else {			return null;		}		return imp.getProcessor();	}	/**	 *  Returns the number of slices in this stack.	 *	 *@return    The size value	 */	@Override    public int getSize() {		return nSlices;	}	/**	 *  Returns the file name of the Nth image.	 *	 *@param  n  Description of the Parameter	 *@return    The sliceLabel value	 */	@Override    public String getSliceLabel(int n) {		return names[n - 1];	}	/**	 *  Returns null.	 *	 *@return    The imageArray value	 */	@Override    public Object[] getImageArray() {		return null;	}	/**	 *  Does nothing.	 *	 *@param  label  The new sliceLabel value	 *@param  n      The new sliceLabel value	 */	@Override    public void setSliceLabel(String label, int n) {	}	/**	 *  Always return true.	 *	 *@return    The virtual value	 */	@Override    public boolean isVirtual() {		return true;	}	/**	 *  Does nothing.	 */	@Override    public void trim() {	}	/**	 *  Returns the path to the directory containing the images.	 *	 *@return    The directory value	 */	public String getDirectory() {		return path;	}	/**	 *  Returns the file name of the specified slice, were 1<=n<=nslices.	 *	 *@param  n  Description of the Parameter	 *@return    The fileName value	 */	public String getFileName(int n) {		return names[n - 1];	}}